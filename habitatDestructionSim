library(dggridR)
library(dplyr)
library(readr)
library(groupdata2)
library(tibble)

### read in the summary statistics (lat range, lat midpoint, etc for each taxon)
### each row is a taxon (unique "acceptedTaxonKey")
### nrow column is how many occurrences per taxon
basidiosWorld = read_csv("GBIF_basidios_world_summaryStats.csv", col_names = TRUE)

### read in the occurrence data 
### each row is one observation
basidiosWorldOcc = read_csv("subset_GBIF_basidios_world.csv", col_names = TRUE)

### originally I made a dataset of only taxa with occurrences between 20 and 100 occurrences
### but I think it maybe makes more sense to just use all taxa with at least 20 occurrences 
basidiosWorld_20plus = subset(basidiosWorld, nrow > 19)

basidiosWorldOcc_tib = as_tibble(basidiosWorldOcc)
basidiosWorld_20plus_tib = as_tibble(basidiosWorld_20plus)

### pull out the occurrences from the taxa that occur at least 20 times
basidiosWorldOcc_20plus = semi_join(basidiosWorldOcc_tib, basidiosWorld_20plus_tib, by = "acceptedTaxonKey")

basidiosWorldOcc_20plus_downsampled = downsample(basidiosWorldOcc_20plus, cat_col="acceptedTaxonKey")

write.csv(basidiosWorldOcc_20plus_downsampled, "basidiosWorldOcc_20plus_downsampled.csv", quote = FALSE, row.names = FALSE)
write.csv(basidiosWorldOcc_20plus, "basidiosWorldOcc_20plus.csv", quote = FALSE, row.names = FALSE)

###initialize dataframe to store results
HLES_total = data.frame(percentSurvive = c(NA), cellSize = c(NA), habitatRemaining = c(NA), taxon = c(NA), thatSeed = c(NA), uniqueThing = c(NA))
write.table(na.omit(HLES_total), "HLES_total.csv", row.names = FALSE, col.names = TRUE, sep = ",", quote = FALSE)

### read in occurrence data
#occ_20plus = read_csv("occ_20plus_downsampled.csv")

### resolution notes see table on https://github.com/r-barnes/dggridR/
cellSize = c(1:14)
habitatLeft = 1/c(2:10)
umbrellaList = unique(occ_20plus$umbrellaTaxon)
umbrellaLength = length(unique(occ_20plus$umbrellaTaxon))
### needs to be 1/integer...this is the proportion of habitat retained, not habitat lost (starts at 1/2 because 1/1 would be all habitat retained)



for (j in 1:14){
	for (k in 1:9){
		dggs = dgconstruct(res = cellSize[j])
		occ_20plus$cell <- dgGEO_to_SEQNUM(dggs, occ_20plus$long, occ_20plus$lat)$seqnum
		randomSorter = rep(1:(1/habitatLeft[k]), length(unique(occ_20plus$cell)))[1:length(unique(occ_20plus$cell))]
			for (i in 1:10){
				thisSeed = sample(100000:999999, 1)
				notThisSeed = sample(0:thisSeed, 1)
				set.seed = thisSeed
				occ_20plusScrambler = data.frame(cell = unique(occ_20plus$cell), randomSorter = sample(randomSorter, length(randomSorter), replace = FALSE))
				occ_20plusCellScramble = left_join(occ_20plus, occ_20plusScrambler, by = "cell")
				subsetOcc_20plus = subset(occ_20plusCellScramble, occ_20plusCellScramble$randomSorter==1)
					for (h in 1:umbrellaLength){
						taxonSubsetOcc_20plus = subset(subsetOcc_20plus, subsetOcc_20plus$umbrellaTaxon == umbrellaList[h])
						taxonOcc_20plus = subset(occ_20plus, occ_20plus$umbrellaTaxon == umbrellaList[h])
						percentExtant = length(unique(taxonSubsetOcc_20plus$acceptedTaxonKey))/length(unique(taxonOcc_20plus$acceptedTaxonKey))
					
					HLES = data.frame(percentSurvive = percentExtant, cellSize = cellSize[j], habitatRemaining = habitatLeft[k], taxon = umbrellaList[h], thatSeed = thisSeed, uniqueThing = paste(thisSeed, notThisSeed, sep = "_"))
					HLES_total = rbind(HLES_total, HLES)
					write.table(HLES, "HLES_total.csv", row.names = FALSE, col.names = FALSE, sep = ",", quote = FALSE, append = TRUE)
						
					}

					

			}
		
	}
}
